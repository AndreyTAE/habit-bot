# main.py
import os
import asyncio
import asyncpg
from datetime import datetime, time as datetime_time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ApplicationBuilder
)
import logging

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –¢–æ–∫–µ–Ω –∏ URL –±–∞–∑—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
async def init_db():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            current_marathon TEXT,
            marathon_day INTEGER DEFAULT 1,
            last_task_date TEXT,
            reminder_time TEXT
        )
    ''')
    await conn.close()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ PostgreSQL")

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
    if not row:
        await conn.execute("INSERT INTO users (user_id) VALUES ($1)", user_id)
    await conn.close()

    keyboard = [
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")],
        [InlineKeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –í—ã–±–æ—Ä –º–∞—Ä–∞—Ñ–æ–Ω–∞ ===
async def choose_marathon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="marathon_meditation")],
        [InlineKeyboardButton("üèÉ –ë–µ–≥", callback_data="marathon_running")],
        [InlineKeyboardButton("üìö –ß—Ç–µ–Ω–∏–µ", callback_data="marathon_reading")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –º–∞—Ä–∞—Ñ–æ–Ω:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞ ===
async def select_marathon(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    marathon = query.data.replace("marathon_", "").replace("_", " ").title()
    
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute('''
        UPDATE users SET current_marathon = $1, marathon_day = 1, last_task_date = NULL 
        WHERE user_id = $2
    ''', marathon, user_id)
    await conn.close()

    await query.edit_message_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—á–∞–ª –º–∞—Ä–∞—Ñ–æ–Ω: **{marathon}**\n–î–µ–Ω—å 1/30 ‚Äî –≤–ø–µ—Ä—ë–¥ –∫ —Ü–µ–ª–∏!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
        ]])
    )

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ===
async def get_daily_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT current_marathon, marathon_day FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if not row or not row['current_marathon']:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–∞—Ä–∞—Ñ–æ–Ω!")
        return

    task = f"–í—ã–ø–æ–ª–Ω–∏ 10 –º–∏–Ω—É—Ç {row['current_marathon'].lower()} —Å–µ–≥–æ–¥–Ω—è!"
    await query.edit_message_text(
        f"üéØ *–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å {row['marathon_day']}*:\n\n{task}\n\n–£–¥–∞—á–∏!",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="task_completed")
        ]])
    )

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===
async def task_completed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT marathon_day, current_marathon FROM users WHERE user_id = $1", user_id)
    if row and row['current_marathon']:
        new_day = row['marathon_day'] + 1
        today = datetime.now().strftime('%Y-%m-%d')
        await conn.execute('''
            UPDATE users SET marathon_day = $1, last_task_date = $2 WHERE user_id = $3
        ''', new_day, today, user_id)
        await query.edit_message_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞ –¥–Ω–µ {new_day}/30. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
            ]])
        )
    await conn.close()

# === –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def my_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow("SELECT current_marathon, marathon_day FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if not row or not row['current_marathon']:
        text = "–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –Ω–∏ –æ–¥–∏–Ω –º–∞—Ä–∞—Ñ–æ–Ω."
    else:
        text = f"üéØ –¢—ã –ø—Ä–æ—Ö–æ–¥–∏—à—å –º–∞—Ä–∞—Ñ–æ–Ω: *{row['current_marathon']}*\nüìÖ –î–µ–Ω—å: {row['marathon_day']}/30"
    
    await query.edit_message_text(
        text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]])
    )

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ===
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("‚è∞ 8:00", callback_data="remind_8:00")],
        [InlineKeyboardButton("‚è∞ 9:00", callback_data="remind_9:00")],
        [InlineKeyboardButton("‚è∞ 10:00", callback_data="remind_10:00")],
        [InlineKeyboardButton("üïí –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="remind_custom")],
        [InlineKeyboardButton("üîï –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="remind_off")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –í–≤–æ–¥ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ===
async def request_custom_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30)")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ===
async def handle_custom_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    time_str = update.message.text.strip()

    try:
        hours, minutes = map(int, time_str.split(":"))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30)")
        return

    job_name = f"reminder_{user_id}"
    if context.job_queue:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        context.job_queue.run_daily(
            send_daily_reminder,
            time=datetime_time(hour=hours, minute=minutes),
            data={"user_id": user_id},
            name=job_name
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("UPDATE users SET reminder_time = $1 WHERE user_id = $2", time_str, user_id)
        await conn.close()
        await update.message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{time_str}**! ‚è∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
            ]]),
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ===
async def save_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ job_queue
    if context.job_queue is None:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    job_name = f"reminder_{user_id}"
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
    for job in context.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()

    if data == "remind_off":
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("UPDATE users SET reminder_time = NULL WHERE user_id = $1", user_id)
        await conn.close()
        await query.edit_message_text(
            "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
            ]])
        )
        return

    time_str = data.replace("remind_", "")
    try:
        hours, minutes = map(int, time_str.split(":"))
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        context.job_queue.run_daily(
            send_daily_reminder,
            time=datetime_time(hour=hours, minute=minutes),
            data={"user_id": user_id},
            name=job_name
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("UPDATE users SET reminder_time = $1 WHERE user_id = $2", time_str, user_id)
        await conn.close()
        await query.edit_message_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{time_str}**! ‚è∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
            ]]),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

# === –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        row = await conn.fetchrow('''
            SELECT current_marathon, marathon_day, last_task_date FROM users WHERE user_id = $1
        ''', user_id)
        await conn.close()

        if not row or not row['current_marathon']:
            return

        today = datetime.now().strftime('%Y-%m-%d')
        if row['last_task_date'] == today:
            return  # –£–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª

        await context.bot.send_message(
            chat_id=user_id,
            text=(
                f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                f"üéØ **{row['current_marathon']}**\n"
                f"üìÖ –î–µ–Ω—å {row['marathon_day']}/30\n"
                f"–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!"
            ),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
            ]]),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")

# === –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ===
async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üèÉ‚Äç‚ôÇÔ∏è –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")],
        [InlineKeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")]
    ]
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# === –ü–æ–º–æ—â—å ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å:\n\n"
        "‚Ä¢ /start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å\n"
        "‚Ä¢ –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]])
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Railway"""
    import asyncio

    async def run_bot():
        await init_db()
        app = Application.builder().token(BOT_TOKEN).build()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("SELECT user_id, reminder_time FROM users WHERE reminder_time IS NOT NULL")
        await conn.close()

        for user_id, time_str in rows:
            if not time_str:
                continue
            try:
                hours, minutes = map(int, time_str.split(":"))
                job_name = f"reminder_{user_id}"
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                current_jobs = app.job_queue.get_jobs_by_name(job_name)
                for job in current_jobs:
                    job.schedule_removal()
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
                app.job_queue.run_daily(
                    send_daily_reminder,
                    time=datetime_time(hour=hours, minute=minutes),
                    data={"user_id": user_id},
                    name=job_name
                )
                logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {user_id} –Ω–∞ {time_str}")
            except Exception as e:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_id}: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start_command))
        app.add_handler(CallbackQueryHandler(choose_marathon, pattern="^choose_marathon$"))
        app.add_handler(CallbackQueryHandler(select_marathon, pattern="^marathon_"))
        app.add_handler(CallbackQueryHandler(get_daily_task, pattern="^get_task$"))
        app.add_handler(CallbackQueryHandler(task_completed, pattern="^task_completed$"))
        app.add_handler(CallbackQueryHandler(my_progress, pattern="^my_progress$"))
        app.add_handler(CallbackQueryHandler(help_command, pattern="^help$"))
        app.add_handler(CallbackQueryHandler(back_to_start, pattern="^back_to_start$"))
        app.add_handler(CallbackQueryHandler(set_reminder, pattern="^set_reminder$"))
        app.add_handler(CallbackQueryHandler(request_custom_time, pattern="^remind_custom$"))
        app.add_handler(CallbackQueryHandler(save_reminder, pattern="^remind_(?!custom|off)"))
        app.add_handler(CallbackQueryHandler(save_reminder, pattern="^remind_off$"))
        app.add_handler(MessageHandler(filters.Regex(r"^\d{1,2}:\d{2}$"), handle_custom_time_input))

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç polling...")

        try:
            await app.initialize()
            await app.start()
            await app.updater.start_polling(
                poll_interval=2.0,
                drop_pending_updates=False,
                allowed_updates=Update.ALL_TYPES
            )
            await asyncio.Event().wait()  # –ñ–¥—ë–º –≤–µ—á–Ω–æ
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        finally:
            await app.updater.stop()
            await app.stop()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ event loop
    try:
        loop = asyncio.get_running_loop()
        if loop.is_running():
            loop.create_task(run_bot())
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π event loop")
        else:
            loop.run_until_complete(run_bot())
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_bot())

if __name__ == '__main__':
    main()