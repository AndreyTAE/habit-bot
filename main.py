import logging
import sqlite3
import asyncio
from datetime import datetime, time as datetime_time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç BotFather
BOT_TOKEN = "8452366284:AAG9YOhS8mdibwfZ0lV8T-15FK0qAK7yqYg"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            registration_date TEXT,
            current_marathon TEXT,
            marathon_day INTEGER DEFAULT 0,
            last_task_date TEXT,
            reminder_time TEXT  -- —Ñ–æ—Ä–º–∞—Ç "09:00"
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS marathons (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT,
            description TEXT,
            is_premium INTEGER DEFAULT 0,
            price INTEGER DEFAULT 0
        )
    ''')
    cursor.execute('SELECT COUNT(*) FROM marathons')
    count = cursor.fetchone()[0]
    if count == 0:
        marathons = [
            ("üìö –ß—Ç–µ–Ω–∏–µ", "30 –¥–Ω–µ–π —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –∫ —á—Ç–µ–Ω–∏—é", 0, 0),
            ("üí™ –§–∏—Ç–Ω–µ—Å", "30 –¥–Ω–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 0, 0),
            ("üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è", "30 –¥–Ω–µ–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏", 1, 150),
            ("üí∞ –§–∏–Ω–∞–Ω—Å—ã", "30 –¥–Ω–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏", 1, 200)
        ]
        cursor.executemany('''
            INSERT INTO marathons (name, description, is_premium, price) 
            VALUES (?, ?, ?, ?)
        ''', marathons)
    conn.commit()
    conn.close()

# –ó–∞–¥–∞–Ω–∏—è –¥–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤
MARATHON_TASKS = {
    "üìö –ß—Ç–µ–Ω–∏–µ": [
        "–ü—Ä–æ—á–∏—Ç–∞–π 5 —Å—Ç—Ä–∞–Ω–∏—Ü –ª—é–±–æ–π –∫–Ω–∏–≥–∏",
        "–ü—Ä–æ—á–∏—Ç–∞–π 10 —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –∑–∞–ø–∏—à–∏ –æ–¥–Ω—É –º—ã—Å–ª—å",
        "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è",
        "–ü—Ä–æ—á–∏—Ç–∞–π 15 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥",
        "–ü–æ–¥–µ–ª–∏—Å—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Ü–∏—Ç–∞—Ç–æ–π —Å –¥—Ä—É–∑—å—è–º–∏",
        "–ü—Ä–æ—á–∏—Ç–∞–π –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ (–ø–∞—Ä–∫, –∫–∞—Ñ–µ)",
        "–ü—Ä–æ—á–∏—Ç–∞–π –ø–µ—Ä–µ–¥ —Å–Ω–æ–º –≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "–ù–∞–π–¥–∏ –∞–≤—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞–Ω—å—à–µ –Ω–µ —á–∏—Ç–∞–ª",
        "–ü—Ä–æ—á–∏—Ç–∞–π 20 —Å—Ç—Ä–∞–Ω–∏—Ü —É—Ç—Ä–æ–º",
        "–û–±—Å—É–¥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å –∫–µ–º-—Ç–æ",
        "–ü—Ä–æ—á–∏—Ç–∞–π –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞",
        "–°–¥–µ–ª–∞–π –∑–∞–º–µ—Ç–∫–∏ –≤–æ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è",
        "–ü—Ä–æ—á–∏—Ç–∞–π –≤ —Ç–∏—à–∏–Ω–µ 30 –º–∏–Ω—É—Ç",
        "–ù–∞–π–¥–∏ –∫–Ω–∏–≥—É –ø–æ –Ω–æ–≤–æ–π —Ç–µ–º–µ",
        "–ü—Ä–æ—á–∏—Ç–∞–π –≤—Å–ª—É—Ö 10 –º–∏–Ω—É—Ç",
        "–ü—Ä–æ—á–∏—Ç–∞–π —Å—Ç–∞—Ç—å—é –Ω–∞ –Ω–∞—É—á–Ω—É—é —Ç–µ–º—É",
        "–ü–µ—Ä–µ—á–∏—Ç–∞–π –ª—é–±–∏–º—É—é –≥–ª–∞–≤—É –∏–∑ –∫–Ω–∏–≥–∏",
        "–ü—Ä–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ",
        "–ü–æ—Å–µ—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∏–ª–∏ –∫–Ω–∏–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω",
        "–ü—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ª—é–±–∏–º—ã–º –∞–≤—Ç–æ—Ä–æ–º",
        "–ü—Ä–æ—á–∏—Ç–∞–π 25 —Å—Ç—Ä–∞–Ω–∏—Ü –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞",
        "–ù–∞–π–¥–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥",
        "–ü—Ä–æ—á–∏—Ç–∞–π —Ä–µ—Ü–µ–Ω–∑–∏—é –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É",
        "–ü—Ä–æ—á–∏—Ç–∞–π –ø–æ—ç–∑–∏—é 15 –º–∏–Ω—É—Ç",
        "–û–±–º–µ–Ω—è–π—Å—è –∫–Ω–∏–≥–∞–º–∏ —Å –¥—Ä—É–≥–æ–º",
        "–ü—Ä–æ—á–∏—Ç–∞–π –æ –∂–∏–∑–Ω–∏ –≤–µ–ª–∏–∫–æ–≥–æ —É—á–µ–Ω–æ–≥–æ",
        "–ü—Ä–æ—á–∏—Ç–∞–π 30 —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –æ–¥–∏–Ω –¥–µ–Ω—å",
        "–ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ",
        "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü",
        "–ü—Ä–æ—á–∏—Ç–∞–π –∏ –ø–æ–¥–µ–ª–∏—Å—å –ª—É—á—à–µ–π –º—ã—Å–ª—å—é –¥–Ω—è"
    ],
    "üí™ –§–∏—Ç–Ω–µ—Å": [
        "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
        "–ü—Ä–æ–π–¥–∏ 5000 —à–∞–≥–æ–≤",
        "–°–¥–µ–ª–∞–π –∑–∞—Ä—è–¥–∫—É 10 –º–∏–Ω—É—Ç",
        "20 –æ—Ç–∂–∏–º–∞–Ω–∏–π (–º–æ–∂–Ω–æ —Å –∫–æ–ª–µ–Ω)",
        "–†–∞—Å—Ç—è–∂–∫–∞ 15 –º–∏–Ω—É—Ç",
        "–ü–ª–∞–Ω–∫–∞ 1 –º–∏–Ω—É—Ç–∞",
        "–ü—Ä–æ–±–µ–∂–∫–∞ –∏–ª–∏ –±—ã—Å—Ç—Ä–∞—è —Ö–æ–¥—å–±–∞ 20 –º–∏–Ω—É—Ç",
        "50 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Å—Å–∞ 10 –º–∏–Ω—É—Ç",
        "–ü–æ–¥—ä–µ–º –ø–æ –ª–µ—Å—Ç–Ω–∏—Ü–µ 10 —ç—Ç–∞–∂–µ–π",
        "–¢–∞–Ω—Ü—ã –ø–æ–¥ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É 15 –º–∏–Ω—É—Ç",
        "30 –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥–µ–Ω—å",
        "–ô–æ–≥–∞ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∞ 20 –º–∏–Ω—É—Ç",
        "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ 30 –º–∏–Ω—É—Ç",
        "100 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ",
        "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 15 –º–∏–Ω—É—Ç",
        "–ü–ª–∞–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–æ–¥–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã",
        "–í–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω—É—Ç",
        "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 20 –º–∏–Ω—É—Ç",
        "–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è —Ö–æ–¥—å–±–∞ 25 –º–∏–Ω—É—Ç",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º",
        "–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–ª–∏ —Å–ø–æ—Ä—Ç 30 –º–∏–Ω—É—Ç",
        "–ü–∏–ª–∞—Ç–µ—Å 20 –º–∏–Ω—É—Ç",
        "–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏ 100 —Ä–∞–∑",
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
        "–ö–∞—Ä–¥–∏–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 25 –º–∏–Ω—É—Ç",
        "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å",
        "–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ",
        "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 45 –º–∏–Ω—É—Ç",
        "–ü–ª–∞–Ω–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü"
    ]
}

# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

async def start_command(update: Update, context):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, username, first_name, registration_date)
        VALUES (?, ?, ?, ?)
    ''', (user_id, username, first_name, datetime.now().strftime('%Y-%m-%d')))
    conn.commit()
    conn.close()

    keyboard = [
        [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üéØ –ü—Ä–∏–≤–µ—Ç, {first_name}!\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Ä–∞—Ñ–æ–Ω –ü–æ–ª–µ–∑–Ω—ã—Ö –ü—Ä–∏–≤—ã—á–µ–∫! üí™\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∑–∞ 30 –¥–Ω–µ–π.\n"
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–¥–∞–Ω–∏–µ,\n"
        "–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –±–æ–ª—å—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è–º!\n\n"
        "–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=reply_markup
    )

# --- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ---

async def set_reminder(update: Update, context):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚è∞ 8:00", callback_data="remind_8:00"),
         InlineKeyboardButton("‚è∞ 9:00", callback_data="remind_9:00")],
        [InlineKeyboardButton("‚è∞ 12:00", callback_data="remind_12:00"),
         InlineKeyboardButton("‚è∞ 18:00", callback_data="remind_18:00")],
        [InlineKeyboardButton("‚è∞ 20:00", callback_data="remind_20:00"),
         InlineKeyboardButton("‚è∞ 21:00", callback_data="remind_21:00")],
        [InlineKeyboardButton("‚è∞ –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è", callback_data="remind_custom")],
        [InlineKeyboardButton("üö´ –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="remind_off")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        "‚è∞ *–í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è.\n"
        "–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def request_custom_time(update: Update, context):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "‚å®Ô∏è –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ß–ß:–ú–ú**\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ `9:00`\n"
        "‚Ä¢ `18:30`\n"
        "‚Ä¢ `21:45`\n\n"
        "–Ø –∑–∞–ø–æ–º–Ω—é –∏ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!",
        parse_mode="Markdown"
    )
    context.user_data['state'] = 'waiting_for_custom_time'

async def save_reminder(update: Update, context):
    query = update.callback_query
    user_id = update.effective_user.id
    data = query.data

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()

    if data == "remind_off":
        cursor.execute('UPDATE users SET reminder_time = NULL WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        await query.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        await query.edit_message_text(
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
            ]])
        )
        return

    time_str = data.replace("remind_", "")
    hours, minutes = map(int, time_str.split(":"))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    job_name = f"reminder_{user_id}"
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
    context.job_queue.run_daily(
        send_daily_reminder,
        time=datetime_time(hour=hours, minute=minutes),
        data={"user_id": user_id},
        name=job_name
    )

    cursor.execute('UPDATE users SET reminder_time = ? WHERE user_id = ?', (time_str, user_id))
    conn.commit()
    conn.close()

    await query.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
    await query.edit_message_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{time_str}** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! ‚è∞",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        ]]),
        parse_mode="Markdown"
    )

async def handle_custom_time_input(update: Update, context):
    if context.user_data.get('state') != 'waiting_for_custom_time':
        return

    context.user_data['state'] = None
    user_id = update.effective_user.id
    text = update.message.text.strip()

    import re
    match = re.match(r"^([0-2]?[0-9]):([0-5][0-9])$", text)
    if not match:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π **–ß–ß:–ú–ú**, –Ω–∞–ø—Ä–∏–º–µ—Ä: `9:00`",
            parse_mode="Markdown"
        )
        return

    hours, minutes = int(match.group(1)), int(match.group(2))
    if hours > 23:
        await update.message.reply_text("‚ùå –ß–∞—Å—ã ‚Äî –æ—Ç 0 –¥–æ 23.")
        return

    time_str = f"{hours:02d}:{minutes:02d}"

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()

    job_name = f"reminder_{user_id}"
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal()

    context.job_queue.run_daily(
        send_daily_reminder,
        time=datetime_time(hour=hours, minute=minutes),
        data={"user_id": user_id},
        name=job_name
    )

    cursor.execute('UPDATE users SET reminder_time = ? WHERE user_id = ?', (time_str, user_id))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ **{time_str}** –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! ‚è∞",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")
        ]]),
        parse_mode="Markdown"
    )

async def send_daily_reminder(context):
    job = context.job
    user_id = job.data["user_id"]

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT current_marathon, marathon_day, last_task_date 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or not result[0]:
        return

    marathon_name, day, last_date = result
    today = datetime.now().strftime('%Y-%m-%d')

    if last_date == today:
        return

    try:
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")
        ]])
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n\n"
                 f"–ù–µ –∑–∞–±—É–¥—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n"
                 f"üéØ **{marathon_name}**\n"
                 f"üìÖ –î–µ–Ω—å {day}/30\n\n"
                 f"–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {user_id}: {e}")

# --- –ú–ê–†–ê–§–û–ù–´ –ò –ó–ê–î–ê–ù–ò–Ø ---

async def choose_marathon(update: Update, context):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, description, is_premium FROM marathons')
    marathons = cursor.fetchall()
    conn.close()

    keyboard = []
    text = "üéØ *–í—ã–±–µ—Ä–∏ –º–∞—Ä–∞—Ñ–æ–Ω:*\n\n"
    for name, desc, is_premium in marathons:
        text += f"**{name}** ‚Äî {desc}\n"
        text += "üíé –ü–†–ï–ú–ò–£–ú\n" if is_premium else "üÜì –ë–ï–°–ü–õ–ê–¢–ù–û\n\n"
        btn_text = f"{name} (–ü–†–ï–ú–ò–£–ú)" if is_premium else name
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"marathon_{name}")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def select_marathon(update: Update, context):
    query = update.callback_query
    await query.answer()
    marathon_name = query.data.replace("marathon_", "")
    user_id = update.effective_user.id

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT is_premium FROM marathons WHERE name = ?', (marathon_name,))
    result = cursor.fetchone()

    if result and result[0]:
        await query.edit_message_text(
            f"üîí –ú–∞—Ä–∞—Ñ–æ–Ω *{marathon_name}* –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
            "–°–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –æ–ø–ª–∞—Ç—É!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="choose_marathon")
            ]]),
            parse_mode="Markdown"
        )
    else:
        cursor.execute('''
            UPDATE users SET current_marathon = ?, marathon_day = 1, last_task_date = ?
            WHERE user_id = ?
        ''', (marathon_name, datetime.now().strftime('%Y-%m-%d'), user_id))
        conn.commit()
        conn.close()

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="get_task")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –º–∞—Ä–∞—Ñ–æ–Ω:\n\n"
            f"**{marathon_name}**\n\n"
            "–ú–∞—Ä–∞—Ñ–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n"
            "–ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é? üí™",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def get_daily_task(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT current_marathon, marathon_day, last_task_date 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result or not result[0]:
        await query.edit_message_text(
            "‚ùå –¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –Ω–∏ –≤ –æ–¥–Ω–æ–º –º–∞—Ä–∞—Ñ–æ–Ω–µ!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")
            ]])
        )
        return

    marathon_name, day, last_date = result
    today = datetime.now().strftime('%Y-%m-%d')

    if last_date == today:
        current_task = MARATHON_TASKS[marathon_name][day - 1]
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="task_completed")],
            [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–î–µ–Ω—å {day}):\nüéØ {current_task}\n–¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞–Ω–∏–µ. –í—ã–ø–æ–ª–Ω–∏ –∏ –æ—Ç–º–µ—Ç—å!",
            reply_markup=reply_markup
        )
        return

    if day > 30:
        await query.edit_message_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –º–∞—Ä–∞—Ñ–æ–Ω! üí™",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üéØ –ù–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")
            ]])
        )
        return

    current_task = MARATHON_TASKS[marathon_name][day - 1]
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="task_completed")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        f"üìã –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –î–µ–Ω—å {day}:\nüéØ {current_task}\n–ú–∞—Ä–∞—Ñ–æ–Ω: {marathon_name}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {day}/30 –¥–Ω–µ–π\n–í—ã–ø–æ–ª–Ω–∏ –∏ –æ—Ç–º–µ—Ç—å! üí™",
        reply_markup=reply_markup
    )

async def task_completed(update: Update, context):
    query = update.callback_query
    await query.answer("–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! üéâ")
    user_id = update.effective_user.id
    today = datetime.now().strftime('%Y-%m-%d')

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE users 
        SET marathon_day = marathon_day + 1, last_task_date = ?
        WHERE user_id = ?
    ''', (today, user_id))
    cursor.execute('SELECT marathon_day FROM users WHERE user_id = ?', (user_id,))
    new_day = cursor.fetchone()[0]
    conn.commit()
    conn.close()

    if new_day > 30:
        await query.edit_message_text(
            "üèÜ *–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –¢–´ –ó–ê–í–ï–†–®–ò–õ –ú–ê–†–ê–§–û–ù!*\n\n"
            "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É! üí™",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üéØ –ù–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")]
            ]),
            parse_mode="Markdown"
        )
    else:
        await query.edit_message_text(
            f"üéâ *–û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å {new_day-1} –∑–∞–≤–µ—Ä—à—ë–Ω!*\n\n"
            f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: **{new_day-1}/30 –¥–Ω–µ–π**\n\n"
            "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –£–≤–∏–¥–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞! üöÄ",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")]
            ]),
            parse_mode="Markdown"
        )

async def my_progress(update: Update, context):
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT current_marathon, marathon_day, registration_date 
        FROM users WHERE user_id = ?
    ''', (user_id,))
    result = cursor.fetchone()
    conn.close()

    if not result:
        await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    current_marathon, day, reg_date = result
    if not current_marathon:
        text = f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n\nüéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∞—Ñ–æ–Ω–æ–≤: 0"
        keyboard = [[InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")]]
    else:
        progress_percent = min(day * 100 // 30, 100)
        progress_bar = "‚ñà" * (progress_percent // 10) + "‚ñë" * (10 - progress_percent // 10)
        text = (f"üìä *–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
                f"üéØ **{current_marathon}**\n"
                f"üìÖ –î–µ–Ω—å: **{day}/30**\n"
                f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: **{progress_percent}%**\n"
                f"[{progress_bar}]\n"
                f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {reg_date}\n")
        if day > 30:
            text += "\nüèÜ *–ú–∞—Ä–∞—Ñ–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!* üéâ"
            keyboard = [[InlineKeyboardButton("üéØ –ù–æ–≤—ã–π –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")]]
        else:
            keyboard = [
                [InlineKeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="get_task")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]
            ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def help_command(update: Update, context):
    query = update.callback_query
    await query.answer()
    text = ("‚ÑπÔ∏è *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n\n"
            "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –º–∞—Ä–∞—Ñ–æ–Ω\n"
            "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–π –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
            "3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π –∏ –æ—Ç–º–µ—á–∞–π ‚úÖ\n"
            "4Ô∏è‚É£ –ß–µ—Ä–µ–∑ 30 –¥–Ω–µ–π ‚Äî –Ω–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞!\n\n"
            "üéÅ *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ä–∞—Ñ–æ–Ω—ã:*\n"
            "‚Ä¢ üìö –ß—Ç–µ–Ω–∏–µ\n"
            "‚Ä¢ üí™ –§–∏—Ç–Ω–µ—Å\n\n"
            "üíé *–ü—Ä–µ–º–∏—É–º –º–∞—Ä–∞—Ñ–æ–Ω—ã —Å–∫–æ—Ä–æ:*\n"
            "‚Ä¢ üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è\n"
            "‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å—ã\n\n"
            "üí¨ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî –ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")

async def back_to_start(update: Update, context):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üéØ –í—ã–±—Ä–∞—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω", callback_data="choose_marathon")],
        [InlineKeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")],
        [InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---

def main():
    init_db()
    app = Application.builder().token(BOT_TOKEN).build()

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    conn = sqlite3.connect('habit_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, reminder_time FROM users WHERE reminder_time IS NOT NULL')
    rows = cursor.fetchall()
    conn.close()

    for user_id, time_str in rows:
        if time_str:
            try:
                hours, minutes = map(int, time_str.split(":"))
                app.job_queue.run_daily(
                    send_daily_reminder,
                    time=datetime_time(hour=hours, minute=minutes),
                    data={"user_id": user_id},
                    name=f"reminder_{user_id}"
                )
            except (ValueError, IndexError):
                continue

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CallbackQueryHandler(choose_marathon, pattern="choose_marathon"))
    app.add_handler(CallbackQueryHandler(select_marathon, pattern="marathon_"))
    app.add_handler(CallbackQueryHandler(get_daily_task, pattern="get_task"))
    app.add_handler(CallbackQueryHandler(task_completed, pattern="task_completed"))
    app.add_handler(CallbackQueryHandler(my_progress, pattern="my_progress"))
    app.add_handler(CallbackQueryHandler(help_command, pattern="help"))
    app.add_handler(CallbackQueryHandler(back_to_start, pattern="back_to_start"))
    app.add_handler(CallbackQueryHandler(set_reminder, pattern="set_reminder"))
    app.add_handler(CallbackQueryHandler(request_custom_time, pattern="^remind_custom$"))
    app.add_handler(CallbackQueryHandler(save_reminder, pattern="^remind_(?!custom)"))
    app.add_handler(MessageHandler(filters.Regex(r"^\d{1,2}:\d{2}$"), handle_custom_time_input))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()